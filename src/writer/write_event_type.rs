use std::fmt::{self, Display};

use super::WriteEvent;

#[derive(Clone, PartialEq, Debug, Eq)]
#[repr(usize)]
pub enum WriteEventType {
    /// Reserved for internal use.
    Nothing,
    /// Event generated at the very beginning of parsing.
    StreamStart,
    /// Last event that will be generated by the parser. Signals EOF.
    StreamEnd,
    /// The YAML start document directive (`---`).
    DocumentStart,
    /// The YAML end document directive (`...`).
    DocumentEnd,
    /// The start of a YAML sequence (array).
    SequenceStart,
    /// The end of a YAML sequence (array).
    SequenceEnd,
    /// The start of a YAML mapping (object, hash).
    MappingStart,
    /// The end of a YAML mapping (object, hash).
    MappingEnd,
    /// A value.
    Scalar,
}

impl Display for WriteEventType {
    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
        match self {
            WriteEventType::Nothing => formatter.write_str("Nothing"),
            WriteEventType::StreamStart => formatter.write_str("StreamStart"),
            WriteEventType::StreamEnd => formatter.write_str("StreamEnd"),
            WriteEventType::DocumentStart => formatter.write_str("DocumentStart"),
            WriteEventType::DocumentEnd => formatter.write_str("DocumentEnd"),
            WriteEventType::SequenceStart => formatter.write_str("SequenceStart"),
            WriteEventType::SequenceEnd => formatter.write_str("SequenceEnd"),
            WriteEventType::MappingStart => formatter.write_str("MappingStart"),
            WriteEventType::MappingEnd => formatter.write_str("MappingEnd"),
            WriteEventType::Scalar => formatter.write_str("Scalar"),
        }
    }
}

impl WriteEventType {
    pub fn from_event(event: &WriteEvent) -> WriteEventType {
        match event {
            WriteEvent::Nothing => WriteEventType::Nothing,
            WriteEvent::StreamStart => WriteEventType::StreamStart,
            WriteEvent::StreamEnd => WriteEventType::StreamEnd,
            WriteEvent::DocumentStart => WriteEventType::DocumentStart,
            WriteEvent::DocumentEnd => WriteEventType::DocumentEnd,
            WriteEvent::SequenceStart => WriteEventType::SequenceStart,
            WriteEvent::SequenceEnd => WriteEventType::SequenceEnd,
            WriteEvent::MappingStart => WriteEventType::MappingStart,
            WriteEvent::MappingEnd => WriteEventType::MappingEnd,
            WriteEvent::Scalar(_) => WriteEventType::Scalar,
        }
    }
}
